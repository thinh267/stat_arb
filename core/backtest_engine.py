import pandas as pd
from datetime import datetime, timedelta
from core.supabase_manager import SupabaseManager

def get_daily_performance_from_positions():
    """
    T√≠nh daily performance t·ª´ positions ƒë√£ ƒë√≥ng trong database, ƒë√∫ng schema m·ªõi
    """
    try:
        supabase_manager = SupabaseManager()
        closed_positions = supabase_manager.get_closed_positions()
        if not closed_positions:
            print("‚ö†Ô∏è Kh√¥ng c√≥ positions ƒë√£ ƒë√≥ng ƒë·ªÉ t√≠nh performance")
            return pd.DataFrame()
        df = pd.DataFrame(closed_positions)
        df['entry_time'] = pd.to_datetime(df['entry_time'])
        df['exit_time'] = pd.to_datetime(df['exit_time'])
        df['date'] = df['exit_time'].dt.date
        # T√≠nh c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
        perf_list = []
        for date, group in df.groupby('date'):
            total_trades = len(group)
            profitable_trades = (group['pnl'] > 0).sum()
            total_pnl = group['pnl'].sum()
            win_rate = (profitable_trades / total_trades * 100) if total_trades > 0 else 0
            perf_list.append({
                'date': date,
                'total_pnl': float(total_pnl),
                'win_rate': float(win_rate),
                'total_trades': int(total_trades),
                'profitable_trades': int(profitable_trades)
            })
        daily_perf = pd.DataFrame(perf_list)
        print(f"‚úÖ T√≠nh daily performance t·ª´ {len(closed_positions)} positions ƒë√£ ƒë√≥ng")
        print(f"üìä C√≥ {len(daily_perf)} ng√†y c√≥ performance")
        return daily_perf
    except Exception as e:
        print(f"‚ùå L·ªói khi t√≠nh daily performance: {e}")
        return pd.DataFrame()

def get_simulation_performance_summary():
    """
    L·∫•y summary performance c·ªßa simulation (kh√¥ng c·∫ßn get_all_positions)
    """
    try:
        supabase_manager = SupabaseManager()
        closed_positions = supabase_manager.get_closed_positions()
        open_positions = supabase_manager.get_all_open_positions()
        # T√≠nh t·ªïng PnL
        total_pnl = sum(pos.get('pnl', 0) for pos in closed_positions)
        summary = {
            'closed_positions': len(closed_positions),
            'open_positions': len(open_positions),
            'total_realized_pnl': total_pnl,
        }
        return summary
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y performance summary: {e}")
        return {}

def save_daily_performance_to_db(daily_df):
    """
    L∆∞u daily performance v√†o database, n·∫øu ƒë√£ c√≥ ng√†y ƒë√≥ th√¨ update, ch∆∞a c√≥ th√¨ insert
    """
    supabase_manager = SupabaseManager()
    print(f"[DEBUG] ƒêang l∆∞u daily performance v√†o database: {daily_df}")
    try:
        data = daily_df.to_dict('records') if hasattr(daily_df, 'to_dict') else daily_df
        result = supabase_manager.save_daily_performance(data)
        print(f"[DEBUG] K·∫øt qu·∫£ insert daily_performance: {result}")
        return result
    except Exception as e:
        print(f"Error saving daily performance: {e}")
        print(f"[DEBUG] L·ªói khi insert daily_performance v·ªõi d·ªØ li·ªáu: {daily_df}")
        return None

def run_backtest_from_positions():
    """
    Ch·∫°y backtest t·ª´ positions trong database
    """
    print("üìà RUNNING BACKTEST FROM POSITIONS")
    print("=" * 50)
    try:
        daily_perf = get_daily_performance_from_positions()
        if daily_perf.empty:
            print("‚ö†Ô∏è Kh√¥ng c√≥ data ƒë·ªÉ backtest")
            return None
        save_daily_performance_to_db(daily_perf)
        print("\nüìä DAILY PERFORMANCE:")
        for _, row in daily_perf.iterrows():
            print(f"   {row['date']}: PnL = {row['total_pnl']:.4f}, Win rate = {row['win_rate']:.2f}%, Total trades = {row['total_trades']}, Profitable trades = {row['profitable_trades']}")
        return daily_perf
    except Exception as e:
        print(f"‚ùå L·ªói trong backtest: {e}")
        return None

if __name__ == "__main__":
    print("üéØ BACKTEST ENGINE - FROM POSITIONS")
    print("=" * 50)
    daily_perf = run_backtest_from_positions()
    if daily_perf is not None:
        print("\n‚úÖ BACKTEST COMPLETED")
    else:
        print("\n‚ùå BACKTEST FAILED") 